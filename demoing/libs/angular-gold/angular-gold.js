// Generated by CoffeeScript 1.4.0
(function() {

  angular.module("gold", []).directive('auBlur', [
    '$parse', function($parse) {
      var link;
      link = function($scope, elm, attrs) {
        var fn;
        fn = $parse(attrs.auBlur);
        elm.bind('blur', function(event) {
          return $scope.$apply(function() {
            return fn($scope, {
              $event: event
            });
          });
        });
        return true;
      };
      return link;
    }
  ]).directive('auFocus', [
    '$parse', function($parse) {
      var link;
      link = function($scope, elm, attrs) {
        var fn;
        fn = $parse(attrs.auFocus);
        elm.bind('focus', function(event) {
          return $scope.$apply(function() {
            return fn($scope, {
              $event: event
            });
          });
        });
        return true;
      };
      return link;
    }
  ]).directive('auControl', function() {
    var ddo;
    ddo = {
      restrict: 'A',
      require: '?ngModel',
      link: function($scope, elm, attrs, ngModel) {
        var read;
        if (!ngModel) {
          return;
        }
        $scope.$watch(attrs.auControl, function(value) {
          attrs.$set('auControl', !!value);
          if (!!value) {
            return elm.attr('contenteditable', '');
          } else {
            return elm.removeAttr('contenteditable');
          }
        });
        read = function() {
          return ngModel.$setViewValue(elm.html());
        };
        read();
        ngModel.$render = function() {
          return elm.html(ngModel.$viewValue || '');
        };
        return elm.bind('blur keyup change', function() {
          return $scope.$apply(read);
        });
      }
    };
    return ddo;
  }).directive('auInputName', [
    '$interpolate', function($interpolate) {
      var ddo;
      ddo = {
        restrict: 'A',
        require: ['?ngModel', '^?form'],
        link: function($scope, elm, attrs, ctrls) {
          var ex, formCtrl, modelCtrl, nameTransformed;
          ex = $interpolate(elm.attr(attrs.$attr.auInputName));
          nameTransformed = ex($scope);
          modelCtrl = ctrls[0];
          modelCtrl.$name = nameTransformed;
          formCtrl = ctrls[1];
          formCtrl.$addControl(modelCtrl);
          return true;
        }
      };
      return ddo;
    }
  ]).directive('auFormName', [
    '$interpolate', function($interpolate) {
      var ddo;
      ddo = {
        restrict: 'A',
        require: '?form',
        link: function($scope, elm, attrs, ctrl) {
          var ex, formCtrl, innerFormCtrl, innerFormName;
          ex = $interpolate(elm.attr(attrs.$attr.auFormName));
          innerFormName = ex($scope);
          innerFormCtrl = ctrl;
          formCtrl = $scope.$parent[elm.attr(attrs.$attr.auOuterForm)];
          formCtrl.$removeControl(innerFormCtrl);
          innerFormCtrl.$name = innerFormName;
          formCtrl.$addControl(innerFormCtrl);
          return true;
        }
      };
      return ddo;
    }
  ]);

}).call(this);
